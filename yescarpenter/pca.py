# yescarpenter/pca.py

# Import required libraries
import pandas as pd
import numpy as np
from sklearn.decomposition import FactorAnalysis, PCA
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

def perform_pca(data, n_components):
    """
    Perform PCA on the data, with optional Varimax rotation.

    Args:
        data (pd.DataFrame): The input data.
        n_components (int): Number of principal components.

    Returns:
        loadings (np.ndarray): PCA or rotated loadings.
        explained_variance (np.ndarray): Explained variance ratio of the components. This is generated by the regular PCA, instead of the rotated PCA
        components (np.ndarray): Transformed components (scores).
    """
    # Convert dataframe to numpy array if necessary
    if isinstance(data, pd.DataFrame):
        data = data.values

    # Standardize the data
    scaler = StandardScaler()
    data = scaler.fit_transform(data)
    
    # FactorAnalysis with varimax rotation
    fa = FactorAnalysis(n_components=n_components, rotation='varimax')
    components = fa.fit_transform(data)
    loadings = fa.components_.T  # Factor loadings (similar to PCA loadings)

    # Conduct PCA using the PCA package for comparison
    pca = PCA(n_components=n_components)
    pca_components = pca.fit_transform(data)
    explained_variance = pca.explained_variance_ratio_

    return loadings, explained_variance, components
